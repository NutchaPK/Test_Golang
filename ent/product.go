// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NutchaPK/test/ent/gender"
	"github.com/NutchaPK/test/ent/product"
	"github.com/NutchaPK/test/ent/size"
	"github.com/NutchaPK/test/ent/style"
)

// Product is the model entity for the Product schema.
type Product struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Price holds the value of the "Price" field.
	Price int `json:"Price,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductQuery when eager-loading is set.
	Edges     ProductEdges `json:"edges"`
	gender_id *int
	size_id   *int
	style_id  *int
}

// ProductEdges holds the relations/edges for other nodes in the graph.
type ProductEdges struct {
	// Style holds the value of the style edge.
	Style *Style `json:"style,omitempty"`
	// Size holds the value of the size edge.
	Size *Size `json:"size,omitempty"`
	// Gender holds the value of the gender edge.
	Gender *Gender `json:"gender,omitempty"`
	// Orders holds the value of the orders edge.
	Orders []*Order `json:"orders,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// StyleOrErr returns the Style value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductEdges) StyleOrErr() (*Style, error) {
	if e.loadedTypes[0] {
		if e.Style == nil {
			// The edge style was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: style.Label}
		}
		return e.Style, nil
	}
	return nil, &NotLoadedError{edge: "style"}
}

// SizeOrErr returns the Size value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductEdges) SizeOrErr() (*Size, error) {
	if e.loadedTypes[1] {
		if e.Size == nil {
			// The edge size was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: size.Label}
		}
		return e.Size, nil
	}
	return nil, &NotLoadedError{edge: "size"}
}

// GenderOrErr returns the Gender value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductEdges) GenderOrErr() (*Gender, error) {
	if e.loadedTypes[2] {
		if e.Gender == nil {
			// The edge gender was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: gender.Label}
		}
		return e.Gender, nil
	}
	return nil, &NotLoadedError{edge: "gender"}
}

// OrdersOrErr returns the Orders value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) OrdersOrErr() ([]*Order, error) {
	if e.loadedTypes[3] {
		return e.Orders, nil
	}
	return nil, &NotLoadedError{edge: "orders"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Product) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case product.FieldID, product.FieldPrice:
			values[i] = new(sql.NullInt64)
		case product.ForeignKeys[0]: // gender_id
			values[i] = new(sql.NullInt64)
		case product.ForeignKeys[1]: // size_id
			values[i] = new(sql.NullInt64)
		case product.ForeignKeys[2]: // style_id
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Product", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Product fields.
func (pr *Product) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case product.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case product.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Price", values[i])
			} else if value.Valid {
				pr.Price = int(value.Int64)
			}
		case product.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field gender_id", value)
			} else if value.Valid {
				pr.gender_id = new(int)
				*pr.gender_id = int(value.Int64)
			}
		case product.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field size_id", value)
			} else if value.Valid {
				pr.size_id = new(int)
				*pr.size_id = int(value.Int64)
			}
		case product.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field style_id", value)
			} else if value.Valid {
				pr.style_id = new(int)
				*pr.style_id = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryStyle queries the "style" edge of the Product entity.
func (pr *Product) QueryStyle() *StyleQuery {
	return (&ProductClient{config: pr.config}).QueryStyle(pr)
}

// QuerySize queries the "size" edge of the Product entity.
func (pr *Product) QuerySize() *SizeQuery {
	return (&ProductClient{config: pr.config}).QuerySize(pr)
}

// QueryGender queries the "gender" edge of the Product entity.
func (pr *Product) QueryGender() *GenderQuery {
	return (&ProductClient{config: pr.config}).QueryGender(pr)
}

// QueryOrders queries the "orders" edge of the Product entity.
func (pr *Product) QueryOrders() *OrderQuery {
	return (&ProductClient{config: pr.config}).QueryOrders(pr)
}

// Update returns a builder for updating this Product.
// Note that you need to call Product.Unwrap() before calling this method if this Product
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Product) Update() *ProductUpdateOne {
	return (&ProductClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the Product entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Product) Unwrap() *Product {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Product is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Product) String() string {
	var builder strings.Builder
	builder.WriteString("Product(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", Price=")
	builder.WriteString(fmt.Sprintf("%v", pr.Price))
	builder.WriteByte(')')
	return builder.String()
}

// Products is a parsable slice of Product.
type Products []*Product

func (pr Products) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
