// Code generated by entc, DO NOT EDIT.

package product

const (
	// Label holds the string label denoting the product type in the database.
	Label = "product"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// EdgeStyle holds the string denoting the style edge name in mutations.
	EdgeStyle = "style"
	// EdgeSize holds the string denoting the size edge name in mutations.
	EdgeSize = "size"
	// EdgeGender holds the string denoting the gender edge name in mutations.
	EdgeGender = "gender"
	// EdgeOrders holds the string denoting the orders edge name in mutations.
	EdgeOrders = "orders"
	// Table holds the table name of the product in the database.
	Table = "products"
	// StyleTable is the table that holds the style relation/edge.
	StyleTable = "products"
	// StyleInverseTable is the table name for the Style entity.
	// It exists in this package in order to avoid circular dependency with the "style" package.
	StyleInverseTable = "styles"
	// StyleColumn is the table column denoting the style relation/edge.
	StyleColumn = "style_id"
	// SizeTable is the table that holds the size relation/edge.
	SizeTable = "products"
	// SizeInverseTable is the table name for the Size entity.
	// It exists in this package in order to avoid circular dependency with the "size" package.
	SizeInverseTable = "sizes"
	// SizeColumn is the table column denoting the size relation/edge.
	SizeColumn = "size_id"
	// GenderTable is the table that holds the gender relation/edge.
	GenderTable = "products"
	// GenderInverseTable is the table name for the Gender entity.
	// It exists in this package in order to avoid circular dependency with the "gender" package.
	GenderInverseTable = "genders"
	// GenderColumn is the table column denoting the gender relation/edge.
	GenderColumn = "gender_id"
	// OrdersTable is the table that holds the orders relation/edge.
	OrdersTable = "orders"
	// OrdersInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	OrdersInverseTable = "orders"
	// OrdersColumn is the table column denoting the orders relation/edge.
	OrdersColumn = "product_id"
)

// Columns holds all SQL columns for product fields.
var Columns = []string{
	FieldID,
	FieldPrice,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "products"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"gender_id",
	"size_id",
	"style_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
